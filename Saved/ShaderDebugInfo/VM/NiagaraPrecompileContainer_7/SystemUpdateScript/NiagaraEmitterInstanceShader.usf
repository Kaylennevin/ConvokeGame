#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_Fountain_EmitterState_LoopDuration;
	float Constants_Fountain_EmitterState_LoopDelay;
	float Constants_Fountain_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Fountain_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Fountain_SpawnBurst_Instantaneous_SpawnProbability;
	int Constants_Fountain_SpawnBurst_Instantaneous_SpawnCount;
	float Constants_Light_EmitterState_LoopDuration;
	float Constants_Light_EmitterState_LoopDelay;
	float Constants_Light_SpawnBurst_Instantaneous001_SpawnTime;
	int Constants_Light_SpawnBurst_Instantaneous001_SpawnGroup;
	float Constants_Light_SpawnBurst_Instantaneous001_SpawnProbability;
	int Constants_Light_SpawnBurst_Instantaneous001_SpawnCount;
	int Emitter_RandomSeed;
}

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_User
{
	float4 Colour_01;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float3 PhysicsAcceleration;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	int ScalabilityExecutionState;
	bool SpawningbCanEverSpawn;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_Subtract_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_SpawnBurst_Instantaneous001
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
};

struct FParamMap0_Particles
{
	float AccumulatedLocEventDT;
	float Age;
	float4 Color;
	NiagaraID ID;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_CylinderLocation
{
	float3 CylinderNormal;
	float3 CylinderVector;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_CylinderLocation CylinderLocation;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_MultiplyLinearColor
{
	float4 LinearColor;
	float4 ScaleFactor;
};

struct FParamMap0_MakeVector4_FromFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_GenerateLocationEvent
{
	bool EventCondition;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_CylinderLocation
{
	float CylinderHeight;
	float CylinderRadius;
	float3 CylinderVector;
	float EndcapRatio;
	float Endcaps;
	float RandomAngle;
	float3 RandomDirection;
	float RandomRadius;
	float RandomRatio;
	float RandomZ;
	bool SurfaceOnly;
	float SurfaceOnlyZAxis;
	bool UseEndcapsSurfaceOnly;
	float XAxis;
	float YAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CylinderLocation CylinderLocation;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_GenerateLocationEvent GenerateLocationEvent;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_Light_SpawnBurst_Instantaneous001
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Light_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Light
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Light_Scalability Scalability;
	FParamMap0_Light_SpawnBurst_Instantaneous001 SpawnBurst_Instantaneous001;
};

struct FParamMap0_InitializeParticle001
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_GenerateLocationEvent
{
	float3 AccelerationToSend;
	bool EventCondition;
	float EventSendRate;
	float FloattoSendasNormalizedParticleAge;
	float FloattoSendasRandomFloat;
	float GapCorrectionAmount;
	NiagaraID ParticleIDtoSendasRibbonID;
	float3 PositionToSend;
	bool UseEventSendRate;
	float3 VelocityToSend;
};

struct FParamMap0_Fountain_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Fountain_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Fountain
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Fountain_Scalability Scalability;
	FParamMap0_Fountain_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
};

struct FParamMap0_Engine_Light
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Fountain
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	FParamMap0_Engine_Fountain Fountain;
	float InverseDeltaTime;
	FParamMap0_Engine_Light Light;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	float Time;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CylinderLocation
{
	int CoordinateSpace;
	float CylinderHeight;
	float3 CylinderOrigin;
	float CylinderRadius;
	bool EnableLatheProfile;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	float3 NonUniformScale;
	float3 Offset;
	int OrientationAxis;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	bool SurfaceOnly;
	float SurfaceOnlyBandThickness;
	bool UseEndcapsInSurfaceOnlyMode;
};

struct FParamMap0_Constants_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Light_SpawnBurst_Instantaneous001
{
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Light_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Light
{
	FParamMap0_Constants_Light_EmitterState EmitterState;
	FParamMap0_Constants_Light_SpawnBurst_Instantaneous001 SpawnBurst_Instantaneous001;
};

struct FParamMap0_Constants_Fountain_SpawnBurst_Instantaneous
{
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Fountain_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Fountain
{
	FParamMap0_Constants_Fountain_EmitterState EmitterState;
	FParamMap0_Constants_Fountain_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Fountain Fountain;
	FParamMap0_Constants_Light Light;
	FParamMap0_Constants_SystemState SystemState;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants Constants;
	FParamMap0_CylinderLocation CylinderLocation;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_Fountain Fountain;
	FParamMap0_GenerateLocationEvent GenerateLocationEvent;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitializeParticle001 InitializeParticle001;
	FParamMap0_Light Light;
	FParamMap0_Local Local;
	FParamMap0_MakeVector4_FromFloat MakeVector4_FromFloat;
	FParamMap0_MultiplyLinearColor MultiplyLinearColor;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_SpawnBurst_Instantaneous001 SpawnBurst_Instantaneous001;
	FParamMap0_Subtract_Vector Subtract_Vector;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_User User;
	FParamMap0_VectorFromFloat VectorFromFloat;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Fountain_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Fountain_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Fountain_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Fountain_Func_(inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Fountain_Func_(inout FSimulationContext Context);
void Fountain_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Light_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Light_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Light_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Light_Func_(inout FSimulationContext Context);
void SpawnBurst_Instantaneous001_Light_Func_(inout FSimulationContext Context);
void Light_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result11 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result12 = In_Condition && Result11;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result12)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result13 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result14 = In_Condition && Result13;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result14)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result16 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result17 = In_Condition && Result16;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result17)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	float Constant3 = 0;
	bool Result = NiagaraAll(Context.Map.System.Age == Constant3);
	float Constant4 = 0.016667;
	float Result1 = max(Context.Map.Constants.SystemState.LoopDuration, Constant4);
	float Duration_IfResult;
	if(Result)
	{
	Duration_IfResult = Result1;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant5 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant5;
	float Result2 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result3 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	float Result4 = Result3 / Context.Map.System.CurrentLoopDuration;
	int Count;
	Count = Result4;
	int Constant6 = 0;
	int Result5 = max(Count, Constant6);
	float Result6 = Result5 * Context.Map.System.CurrentLoopDuration;
	float Result7 = Result3 - Result6;
	int Constant7 = 0;
	bool Result8 = NiagaraAll(Result5 > Constant7);
	int Result9 = Result5 + Context.Map.System.LoopCount;
	Context.Map.System.Age = Result2;
	Context.Map.System.LoopedAge = Result7;
	Context.Map.Local.SystemState.LoopCountIncreased = Result8;
	Context.Map.System.LoopCount = Result9;
	float float_IfResult;
	if(Context.Map.SystemState.RecalculateDurationEachLoop)
	{
	float_IfResult = Context.Map.Constants.SystemState.LoopDuration;
	}
	else
	{
	float_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult = float_IfResult;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = CurrentLoopDuration_IfResult;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result10 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result10;
	bool Constant8 = true;
	int Constant9 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant8, Constant9, Context);
	int Constant10 = 3;
	bool Constant11 = false;
	int Constant12 = 3;
	SystemState_SystemChangeState_Func_(Constant10, Constant11, Constant12, Context);
	bool Constant13 = true;
	Context.Map.System.bCompleteOnInactive = Constant13;
	int Constant14 = 0;
	bool Result15 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant14);
	int Constant15 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result15, Constant15, Context);
}

void EmitterState_EmitterChangeState002_Fountain_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant27 = 3;
	bool Result32 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant27);
	int Constant28 = 4;
	bool Result33 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant28);
	bool Result34 = Result32 && Result33;
	bool Result35 = In_Condition && Result34;
	bool Result36 = NiagaraAll(Context.Map.Fountain.ExecutionStateSource <= In_NewStateSource);
	bool Result37 = Result35 && Result36;
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result37)
	{
	ENiagaraExecutionState_IfResult3 = In_NewState;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.Fountain.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.Fountain.ExecutionStateSource;
	}
	Context.Map.Fountain.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.Fountain.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState005_Fountain_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant33 = 3;
	bool Result41 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant33);
	int Constant34 = 4;
	bool Result42 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant34);
	bool Result43 = Result41 && Result42;
	bool Result44 = In_Condition && Result43;
	bool Result45 = NiagaraAll(Context.Map.Fountain.ExecutionStateSource <= In_NewStateSource);
	bool Result46 = Result44 && Result45;
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result46)
	{
	ENiagaraExecutionState_IfResult4 = In_NewState;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.Fountain.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.Fountain.ExecutionStateSource;
	}
	Context.Map.Fountain.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.Fountain.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState003_Fountain_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant39 = 3;
	bool Result51 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant39);
	int Constant40 = 4;
	bool Result52 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant40);
	bool Result53 = Result51 && Result52;
	bool Result54 = In_Condition && Result53;
	bool Result55 = NiagaraAll(Context.Map.Fountain.ExecutionStateSource <= In_NewStateSource);
	bool Result56 = Result54 && Result55;
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result56)
	{
	ENiagaraExecutionState_IfResult5 = In_NewState;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.Fountain.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.Fountain.ExecutionStateSource;
	}
	Context.Map.Fountain.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.Fountain.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_Fountain_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Fountain.ExecutionState;
	float Constant16 = 0.016667;
	float Result18 = max(Context.Map.Constants.Fountain.EmitterState.LoopDuration, Constant16);
	Context.Map.Local.EmitterState.LoopDuration = Result18;
	float Constant17 = 0;
	bool Result19 = NiagaraAll(Context.Map.Fountain.Age == Constant17);
	float Duration_IfResult1;
	if(Result19)
	{
	Duration_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult1 = Context.Map.Fountain.CurrentLoopDuration;
	}
	float Constant18 = 0;
	Context.Map.Fountain.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.EmitterState.LoopDelay = Constant18;
	float Result20 = Context.Map.Fountain.Age + Context.Map.Engine.DeltaTime;
	float Result21 = Context.Map.Engine.DeltaTime + Context.Map.Fountain.LoopedAge;
	float Result22 = Result21 / Context.Map.Fountain.CurrentLoopDuration;
	int Count1;
	Count1 = Result22;
	int Constant19 = 0;
	int Result23 = max(Count1, Constant19);
	float Result24 = Result23 * Context.Map.Fountain.CurrentLoopDuration;
	float Result25 = Result21 - Result24;
	int Constant20 = 0;
	bool Result26 = NiagaraAll(Result23 > Constant20);
	int Result27 = Result23 + Context.Map.Fountain.LoopCount;
	Context.Map.Fountain.Age = Result20;
	Context.Map.Fountain.LoopedAge = Result25;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result26;
	Context.Map.Fountain.LoopCount = Result27;
	bool Constant21 = false;
	Context.Map.EmitterState.RecalculateDurationEachLoop = Constant21;
	float float_IfResult1;
	if(Context.Map.EmitterState.RecalculateDurationEachLoop)
	{
	float_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	float_IfResult1 = Context.Map.Fountain.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult1;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult1 = float_IfResult1;
	LoopedAge_IfResult1 = Context.Map.Fountain.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult1 = Context.Map.Fountain.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.Fountain.LoopedAge;
	}
	Context.Map.Fountain.CurrentLoopDuration = CurrentLoopDuration_IfResult1;
	Context.Map.Fountain.LoopedAge = LoopedAge_IfResult1;
	float Result28 = Context.Map.Fountain.LoopedAge / Context.Map.Fountain.CurrentLoopDuration;
	Context.Map.Fountain.NormalizedLoopAge = Result28;
	float Constant22 = 0;
	float Constant23 = 1.0001;
	float Result29 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant22,Constant23);
	Context.Map.Fountain.Scalability.DistanceFraction = Result29;
	int Constant24 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant24;
	int Constant25 = 0;
	bool Result30 = NiagaraAll(Context.Map.Engine.Fountain.NumParticles == Constant25);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result30;
	int Constant26 = 0;
	bool Result31 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant26);
	EmitterState_EmitterChangeState002_Fountain_Func_(Context.Map.System.ExecutionState, Result31, Context.Map.System.ExecutionStateSource, Context);
	int Constant29 = 1;
	int Constant30 = 0;
	bool Result38 = NiagaraAll(Context.Map.System.ExecutionState != Constant30);
	int Constant31 = 2;
	bool Result39 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant31);
	bool Result40 = Result38 && Result39;
	int Constant32 = 1;
	EmitterState_EmitterChangeState005_Fountain_Func_(Constant29, Result40, Constant32, Context);
	int Constant35 = 3;
	int Constant36 = 0;
	bool Result47 = NiagaraAll(Context.Map.Fountain.ExecutionState != Constant36);
	int Constant37 = 0;
	bool Result48 = NiagaraAll(Context.Map.Fountain.ExecutionStateSource != Constant37);
	bool Result49 = Result47 && Result48;
	bool Result50 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result49;
	int Constant38 = 3;
	EmitterState_EmitterChangeState003_Fountain_Func_(Constant35, Result50, Constant38, Context);
}

void SpawnBurst_Instantaneous_Fountain_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Fountain.LoopedAge;
	float Result57 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result58 = Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnTime - Result57;
	float Constant41 = 0;
	float Output1;
	Output1 = Constant41;
	bool Result59 = NiagaraAll(Result58 >= Output1);
	float Result60 = Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result61 = NiagaraAll(Result60 < Output1);
	bool Result62 = Result59 && Result61;
	float Constant42 = 1;
	Context.Map.Transient.ScalabilityEmitterSpawnCountScale = Constant42;
	int Constant43 = 0;
	bool Result63 = NiagaraAll(Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnCount == Constant43);
	float Constant44 = 0;
	float Result64 = Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Fountain.SpawnCountScale;
	float Constant45 = 1;
	float Result65 = max(Result64, Constant45);
	float float_IfResult2;
	if(Result63)
	{
	float_IfResult2 = Constant44;
	}
	else
	{
	float_IfResult2 = Result65;
	}
	float Constant46 = 0;
	NiagaraSpawnInfo Output11;
	Output11.Count = float_IfResult2;
	Output11.InterpStartDt = Result58;
	Output11.IntervalDt = Constant46;
	Output11.SpawnGroup = Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant47 = 0;
	float Constant48 = 0;
	float Constant49 = 0;
	NiagaraSpawnInfo Output12;
	Output12.Count = Constant47;
	Output12.InterpStartDt = Constant48;
	Output12.SpawnGroup = Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnGroup;
	Output12.IntervalDt = Constant49;
	NiagaraSpawnInfo SpawnInfo_IfResult;
	if(Result62)
	{
	SpawnInfo_IfResult = Output11;
	}
	else
	{
	SpawnInfo_IfResult = Output12;
	}
	Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult;
	bool Constant50 = false;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant50;
	bool Result66 = NiagaraAll(Context.Map.Fountain.LoopedAge <= Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnTime);
	bool Result67 = Context.Map.Transient.SpawningbCanEverSpawn || Result66;
	Context.Map.Transient.SpawningbCanEverSpawn = Result67;
}

void Fountain_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_Fountain_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	SpawnBurst_Instantaneous_Fountain_Func_(Context);
	ExitStatScope( );
}

void EmitterState_EmitterChangeState002_Light_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant62 = 3;
	bool Result82 = NiagaraAll(Context.Map.Light.ExecutionState != Constant62);
	int Constant63 = 4;
	bool Result83 = NiagaraAll(Context.Map.Light.ExecutionState != Constant63);
	bool Result84 = Result82 && Result83;
	bool Result85 = In_Condition && Result84;
	bool Result86 = NiagaraAll(Context.Map.Light.ExecutionStateSource <= In_NewStateSource);
	bool Result87 = Result85 && Result86;
	int ENiagaraExecutionState_IfResult6;
	int ENiagaraExecutionStateSource_IfResult6;
	if(Result87)
	{
	ENiagaraExecutionState_IfResult6 = In_NewState;
	ENiagaraExecutionStateSource_IfResult6 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult6 = Context.Map.Light.ExecutionState;
	ENiagaraExecutionStateSource_IfResult6 = Context.Map.Light.ExecutionStateSource;
	}
	Context.Map.Light.ExecutionState = ENiagaraExecutionState_IfResult6;
	Context.Map.Light.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult6;
}

void EmitterState_EmitterChangeState005_Light_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant68 = 3;
	bool Result91 = NiagaraAll(Context.Map.Light.ExecutionState != Constant68);
	int Constant69 = 4;
	bool Result92 = NiagaraAll(Context.Map.Light.ExecutionState != Constant69);
	bool Result93 = Result91 && Result92;
	bool Result94 = In_Condition && Result93;
	bool Result95 = NiagaraAll(Context.Map.Light.ExecutionStateSource <= In_NewStateSource);
	bool Result96 = Result94 && Result95;
	int ENiagaraExecutionState_IfResult7;
	int ENiagaraExecutionStateSource_IfResult7;
	if(Result96)
	{
	ENiagaraExecutionState_IfResult7 = In_NewState;
	ENiagaraExecutionStateSource_IfResult7 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult7 = Context.Map.Light.ExecutionState;
	ENiagaraExecutionStateSource_IfResult7 = Context.Map.Light.ExecutionStateSource;
	}
	Context.Map.Light.ExecutionState = ENiagaraExecutionState_IfResult7;
	Context.Map.Light.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult7;
}

void EmitterState_EmitterChangeState003_Light_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant74 = 3;
	bool Result101 = NiagaraAll(Context.Map.Light.ExecutionState != Constant74);
	int Constant75 = 4;
	bool Result102 = NiagaraAll(Context.Map.Light.ExecutionState != Constant75);
	bool Result103 = Result101 && Result102;
	bool Result104 = In_Condition && Result103;
	bool Result105 = NiagaraAll(Context.Map.Light.ExecutionStateSource <= In_NewStateSource);
	bool Result106 = Result104 && Result105;
	int ENiagaraExecutionState_IfResult8;
	int ENiagaraExecutionStateSource_IfResult8;
	if(Result106)
	{
	ENiagaraExecutionState_IfResult8 = In_NewState;
	ENiagaraExecutionStateSource_IfResult8 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult8 = Context.Map.Light.ExecutionState;
	ENiagaraExecutionStateSource_IfResult8 = Context.Map.Light.ExecutionStateSource;
	}
	Context.Map.Light.ExecutionState = ENiagaraExecutionState_IfResult8;
	Context.Map.Light.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult8;
}

void EmitterState_Light_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Light.ExecutionState;
	float Constant51 = 0.016667;
	float Result68 = max(Context.Map.Constants.Light.EmitterState.LoopDuration, Constant51);
	Context.Map.Local.EmitterState.LoopDuration = Result68;
	float Constant52 = 0;
	bool Result69 = NiagaraAll(Context.Map.Light.Age == Constant52);
	float Duration_IfResult2;
	if(Result69)
	{
	Duration_IfResult2 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult2 = Context.Map.Light.CurrentLoopDuration;
	}
	float Constant53 = 0;
	Context.Map.Light.CurrentLoopDuration = Duration_IfResult2;
	Context.Map.EmitterState.LoopDelay = Constant53;
	float Result70 = Context.Map.Light.Age + Context.Map.Engine.DeltaTime;
	float Result71 = Context.Map.Engine.DeltaTime + Context.Map.Light.LoopedAge;
	float Result72 = Result71 / Context.Map.Light.CurrentLoopDuration;
	int Count2;
	Count2 = Result72;
	int Constant54 = 0;
	int Result73 = max(Count2, Constant54);
	float Result74 = Result73 * Context.Map.Light.CurrentLoopDuration;
	float Result75 = Result71 - Result74;
	int Constant55 = 0;
	bool Result76 = NiagaraAll(Result73 > Constant55);
	int Result77 = Result73 + Context.Map.Light.LoopCount;
	Context.Map.Light.Age = Result70;
	Context.Map.Light.LoopedAge = Result75;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result76;
	Context.Map.Light.LoopCount = Result77;
	bool Constant56 = false;
	Context.Map.EmitterState.RecalculateDurationEachLoop = Constant56;
	float float_IfResult3;
	if(Context.Map.EmitterState.RecalculateDurationEachLoop)
	{
	float_IfResult3 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	float_IfResult3 = Context.Map.Light.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult2;
	float LoopedAge_IfResult2;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult2 = float_IfResult3;
	LoopedAge_IfResult2 = Context.Map.Light.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult2 = Context.Map.Light.CurrentLoopDuration;
	LoopedAge_IfResult2 = Context.Map.Light.LoopedAge;
	}
	Context.Map.Light.CurrentLoopDuration = CurrentLoopDuration_IfResult2;
	Context.Map.Light.LoopedAge = LoopedAge_IfResult2;
	float Result78 = Context.Map.Light.LoopedAge / Context.Map.Light.CurrentLoopDuration;
	Context.Map.Light.NormalizedLoopAge = Result78;
	float Constant57 = 0;
	float Constant58 = 1.0001;
	float Result79 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant57,Constant58);
	Context.Map.Light.Scalability.DistanceFraction = Result79;
	int Constant59 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant59;
	int Constant60 = 0;
	bool Result80 = NiagaraAll(Context.Map.Engine.Light.NumParticles == Constant60);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result80;
	int Constant61 = 0;
	bool Result81 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant61);
	EmitterState_EmitterChangeState002_Light_Func_(Context.Map.System.ExecutionState, Result81, Context.Map.System.ExecutionStateSource, Context);
	int Constant64 = 1;
	int Constant65 = 0;
	bool Result88 = NiagaraAll(Context.Map.System.ExecutionState != Constant65);
	int Constant66 = 2;
	bool Result89 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant66);
	bool Result90 = Result88 && Result89;
	int Constant67 = 1;
	EmitterState_EmitterChangeState005_Light_Func_(Constant64, Result90, Constant67, Context);
	int Constant70 = 3;
	int Constant71 = 0;
	bool Result97 = NiagaraAll(Context.Map.Light.ExecutionState != Constant71);
	int Constant72 = 0;
	bool Result98 = NiagaraAll(Context.Map.Light.ExecutionStateSource != Constant72);
	bool Result99 = Result97 && Result98;
	bool Result100 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result99;
	int Constant73 = 3;
	EmitterState_EmitterChangeState003_Light_Func_(Constant70, Result100, Constant73, Context);
}

void SpawnBurst_Instantaneous001_Light_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous001.Age = Context.Map.Light.LoopedAge;
	float Result107 = Context.Map.SpawnBurst_Instantaneous001.Age - Context.Map.Engine.DeltaTime;
	float Result108 = Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnTime - Result107;
	float Constant76 = 0;
	float Output13;
	Output13 = Constant76;
	bool Result109 = NiagaraAll(Result108 >= Output13);
	float Result110 = Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnTime - Context.Map.SpawnBurst_Instantaneous001.Age;
	bool Result111 = NiagaraAll(Result110 < Output13);
	bool Result112 = Result109 && Result111;
	int Constant77 = 0;
	bool Result113 = NiagaraAll(Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnCount == Constant77);
	float Constant78 = 0;
	float Result114 = Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Light.SpawnCountScale;
	float Constant79 = 1;
	float Result115 = max(Result114, Constant79);
	float float_IfResult4;
	if(Result113)
	{
	float_IfResult4 = Constant78;
	}
	else
	{
	float_IfResult4 = Result115;
	}
	float Constant80 = 0;
	NiagaraSpawnInfo Output14;
	Output14.Count = float_IfResult4;
	Output14.InterpStartDt = Result108;
	Output14.IntervalDt = Constant80;
	Output14.SpawnGroup = Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnGroup;
	int Constant81 = 0;
	float Constant82 = 0;
	float Constant83 = 0;
	NiagaraSpawnInfo Output15;
	Output15.Count = Constant81;
	Output15.InterpStartDt = Constant82;
	Output15.SpawnGroup = Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnGroup;
	Output15.IntervalDt = Constant83;
	NiagaraSpawnInfo SpawnInfo_IfResult1;
	if(Result112)
	{
	SpawnInfo_IfResult1 = Output14;
	}
	else
	{
	SpawnInfo_IfResult1 = Output15;
	}
	Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst = SpawnInfo_IfResult1;
	bool Result116 = NiagaraAll(Context.Map.Light.LoopedAge <= Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnTime);
	bool Result117 = Context.Map.Transient.SpawningbCanEverSpawn || Result116;
	Context.Map.Transient.SpawningbCanEverSpawn = Result117;
}

void Light_Func_(inout FSimulationContext Context)
{
	EnterStatScope(6 );
	EmitterState_Light_Func_(Context);
	ExitStatScope( );
	EnterStatScope(7 );
	SpawnBurst_Instantaneous001_Light_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = (false);
	Context.Map.Local.SystemState.LoopCountIncreased = Constant;
	bool Constant1 = false;
	Context.Map.SystemState.RecalculateDurationEachLoop = Constant1;
	int Constant2 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant2;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Fountain_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	Light_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.Fountain.Age = InputDataFloat(0, 1);
	Context.Map.Fountain.CurrentLoopDuration = InputDataFloat(0, 2);
	Context.Map.Fountain.ExecutionState = InputDataInt(0, 3);
	Context.Map.Fountain.ExecutionStateSource = InputDataInt(0, 4);
	Context.Map.Fountain.LocalSpace = InputDataBool(0, 5);
	Context.Map.Fountain.LoopCount = InputDataInt(0, 6);
	Context.Map.Fountain.LoopedAge = InputDataFloat(0, 7);
	Context.Map.Fountain.NormalizedLoopAge = InputDataFloat(0, 8);
	Context.Map.Fountain.Scalability.DistanceFraction = InputDataFloat(0, 9);
	Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Light.Age = InputDataFloat(0, 14);
	Context.Map.Light.CurrentLoopDuration = InputDataFloat(0, 15);
	Context.Map.Light.ExecutionState = InputDataInt(0, 16);
	Context.Map.Light.ExecutionStateSource = InputDataInt(0, 17);
	Context.Map.Light.LocalSpace = InputDataBool(0, 18);
	Context.Map.Light.LoopCount = InputDataInt(0, 19);
	Context.Map.Light.LoopedAge = InputDataFloat(0, 20);
	Context.Map.Light.NormalizedLoopAge = InputDataFloat(0, 21);
	Context.Map.Light.Scalability.DistanceFraction = InputDataFloat(0, 22);
	Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.Count = 0;
	Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.SpawnGroup = 0;
	Context.Map.System.Age = InputDataFloat(0, 27);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 28);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 29);
	Context.Map.System.ExecutionState = InputDataInt(0, 30);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 31);
	Context.Map.System.LoopCount = InputDataInt(0, 32);
	Context.Map.System.LoopedAge = InputDataFloat(0, 33);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 34);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.Fountain.NumParticles = InputDataInt(1, 1);
	Context.Map.Engine.Fountain.SpawnCountScale = InputDataFloat(1, 2);
	Context.Map.Engine.Light.NumParticles = InputDataInt(1, 3);
	Context.Map.Engine.Light.SpawnCountScale = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 5);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 6);
	Context.Map.Constants.SystemState.LoopDelay = Constants_SystemState_LoopDelay;
	Context.Map.Constants.SystemState.LoopDuration = Constants_SystemState_LoopDuration;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Fountain.EmitterState.LoopDuration = Constants_Fountain_EmitterState_LoopDuration;
	Context.Map.Constants.Fountain.EmitterState.LoopDelay = Constants_Fountain_EmitterState_LoopDelay;
	Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnTime = Constants_Fountain_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnGroup = Constants_Fountain_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnProbability = Constants_Fountain_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.Fountain.SpawnBurst_Instantaneous.SpawnCount = Constants_Fountain_SpawnBurst_Instantaneous_SpawnCount;
	Context.Map.Constants.Light.EmitterState.LoopDuration = Constants_Light_EmitterState_LoopDuration;
	Context.Map.Constants.Light.EmitterState.LoopDelay = Constants_Light_EmitterState_LoopDelay;
	Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnTime = Constants_Light_SpawnBurst_Instantaneous001_SpawnTime;
	Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnGroup = Constants_Light_SpawnBurst_Instantaneous001_SpawnGroup;
	Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnProbability = Constants_Light_SpawnBurst_Instantaneous001_SpawnProbability;
	Context.Map.Constants.Light.SpawnBurst_Instantaneous001.SpawnCount = Constants_Light_SpawnBurst_Instantaneous001_SpawnCount;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Fountain.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Fountain.CurrentLoopDuration);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.Fountain.ExecutionState);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.Fountain.ExecutionStateSource);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.Fountain.LocalSpace);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.Fountain.LoopCount);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Fountain.LoopedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Fountain.NormalizedLoopAge);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Fountain.Scalability.DistanceFraction);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.Fountain.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Light.Age);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Light.CurrentLoopDuration);
	OutputDataInt(0, 16, TmpWriteIndex, Context.Map.Light.ExecutionState);
	OutputDataInt(0, 17, TmpWriteIndex, Context.Map.Light.ExecutionStateSource);
	OutputDataBool(0, 18, TmpWriteIndex, Context.Map.Light.LocalSpace);
	OutputDataInt(0, 19, TmpWriteIndex, Context.Map.Light.LoopCount);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Light.LoopedAge);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Light.NormalizedLoopAge);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Light.Scalability.DistanceFraction);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.Count);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.IntervalDt);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Light.SpawnBurst_Instantaneous001.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 28, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 30, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 31, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 32, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
