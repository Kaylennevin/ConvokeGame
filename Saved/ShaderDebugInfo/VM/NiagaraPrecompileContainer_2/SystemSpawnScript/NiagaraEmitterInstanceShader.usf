#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	int Emitter_RandomSeed;
}

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat001
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_User
{
	float4 Colour_01;
	float4 Colour_02;
};

struct FParamMap0_UniformRangedFloat006
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	bool SpawningbCanEverSpawn;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_Subtract_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_SpriteSizeScale
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_Smoke_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Smoke_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Smoke001_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Smoke001
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Smoke001_Scalability Scalability;
};

struct FParamMap0_Smoke
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Smoke_Scalability Scalability;
	FParamMap0_Smoke_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_SetVariables_3A802B93438D5A32544EBE8EBAF101D3_Particles
{
	float SpriteRotation;
};

struct FParamMap0_SetVariables_3A802B93438D5A32544EBE8EBAF101D3
{
	FParamMap0_SetVariables_3A802B93438D5A32544EBE8EBAF101D3_Particles Particles;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ReceiveLocationEvent
{
	float InheritedVelocityScale;
	bool InheritParentNormalizedAge;
	bool InheritVelocity;
	int SpawnCount;
	bool UseAcceleration;
	bool WritePayloadtoParticleAttributes;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float4 DynamicMaterialParameter;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float RandomNormalizedFloat;
	NiagaraID RibbonID;
	float RotationalInertia;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_CylinderLocation
{
	float3 CylinderNormal;
	float3 CylinderVector;
};

struct FParamMap0_OUTPUT_VAR_CalculateSizeAndRotationalInertiaByMass
{
	float SphereRadius;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_OUTPUT_VAR_CylinderLocation CylinderLocation;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
};

struct FParamMap0_OmnidirectionalBurst_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_OmnidirectionalBurst_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_OmnidirectionalBurst
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_OmnidirectionalBurst_Scalability Scalability;
	FParamMap0_OmnidirectionalBurst_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_NormalizeVector
{
	float3 VectorToNormalize;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_Multiply_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_ReceiveLocationEvent
{
	float3 EventAcceleration;
	float EventNormalizedAge;
	float3 EventPosition;
	NiagaraID EventRibbonID;
	float3 EventVelocity;
	float3 InheritedVelocity;
	float RandomNormalizedFloat;
	float SpacingInterval;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_CylinderLocation
{
	float CylinderHeight;
	float CylinderRadius;
	float3 CylinderVector;
	float EndcapRatio;
	float Endcaps;
	float RandomAngle;
	float3 RandomDirection;
	float RandomRadius;
	float RandomRatio;
	float RandomZ;
	bool SurfaceOnly;
	float SurfaceOnlyZAxis;
	bool UseEndcapsSurfaceOnly;
	float XAxis;
	float YAxis;
};

struct FParamMap0_Local_CalculateSizeAndRotationalInertiaByMass
{
	float CurrentDensity;
	float ParticleVolume;
	float3 UserMeshDimensionPreference;
	float2 UserSpriteDimensionPreference;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_Local_CylinderLocation CylinderLocation;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_ReceiveLocationEvent ReceiveLocationEvent;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SphereLocation SphereLocation;
};

struct FParamMap0_LerpLinearColors
{
	float4 EndColor;
	float LerpFactor;
	float4 StartColor;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve004
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve003
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_Smoke001
{
	int NumParticles;
};

struct FParamMap0_Engine_Smoke
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Owner
{
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
};

struct FParamMap0_Engine_OmnidirectionalBurst
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_OmnidirectionalBurst OmnidirectionalBurst;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_Smoke Smoke;
	FParamMap0_Engine_Smoke001 Smoke001;
	float Time;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CylinderLocation
{
	int CoordinateSpace;
	float CylinderHeight;
	float3 CylinderOrigin;
	float CylinderRadius;
	bool EnableLatheProfile;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	float3 NonUniformScale;
	float3 Offset;
	int OrientationAxis;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	bool SurfaceOnly;
	float SurfaceOnlyBandThickness;
	bool UseEndcapsInSurfaceOnlyMode;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_CalculateSizeAndRotationalInertiaByMass
{
	bool CalculateMeshScale;
	int DensitybyMaterialType;
	float Depth;
	float Height;
	float3 InitialModelDimensions;
	bool ManuallyEnterDensity;
	float ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	float MassModulation;
	float3 ModelProportions;
	float2 SpriteSizeModulation;
	float Width;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0_AddVelocity
{
	int CoordinateSpace;
	float3 ScaleAddedVelocity;
	float3 Velocity;
};

struct FParamMap0_Add_Float
{
	float A;
	float B;
};

struct FParamMap0
{
	FParamMap0_Add_Float Add_Float;
	FParamMap0_AddVelocity AddVelocity;
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_Color Color;
	FParamMap0_CylinderLocation CylinderLocation;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_FloatFromCurve003 FloatFromCurve003;
	FParamMap0_FloatFromCurve004 FloatFromCurve004;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_LerpLinearColors LerpLinearColors;
	FParamMap0_Local Local;
	FParamMap0_Multiply_Vector Multiply_Vector;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_NormalizeVector NormalizeVector;
	FParamMap0_OmnidirectionalBurst OmnidirectionalBurst;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ReceiveLocationEvent ReceiveLocationEvent;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SetVariables_3A802B93438D5A32544EBE8EBAF101D3 SetVariables_3A802B93438D5A32544EBE8EBAF101D3;
	FParamMap0_Smoke Smoke;
	FParamMap0_Smoke001 Smoke001;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_SpriteSizeScale SpriteSizeScale;
	FParamMap0_Subtract_Vector Subtract_Vector;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedFloat006 UniformRangedFloat006;
	FParamMap0_User User;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
	FParamMap0_Vector2DFromFloat001 Vector2DFromFloat001;
	FParamMap0_VectorFromFloat VectorFromFloat;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void OmnidirectionalBurst_Func_(inout FSimulationContext Context);
void Smoke001_Func_(inout FSimulationContext Context);
void Smoke_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void OmnidirectionalBurst_Func_(inout FSimulationContext Context)
{

}

void Smoke001_Func_(inout FSimulationContext Context)
{

}

void Smoke_Func_(inout FSimulationContext Context)
{

}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );

	int Constant = 0;
	Context.Map.OmnidirectionalBurst.ExecutionState = Constant;
	float Constant1 = 0;
	Context.Map.OmnidirectionalBurst.Age = Constant1;
	float Constant2 = 0;
	Context.Map.OmnidirectionalBurst.CurrentLoopDuration = Constant2;
	float Constant3 = 0;
	Context.Map.OmnidirectionalBurst.LoopedAge = Constant3;
	int Constant4 = 0;
	Context.Map.OmnidirectionalBurst.LoopCount = Constant4;
	float Constant5 = (0.0);
	Context.Map.OmnidirectionalBurst.NormalizedLoopAge = Constant5;
	float Constant6 = (0.0);
	Context.Map.OmnidirectionalBurst.Scalability.DistanceFraction = Constant6;
	int Constant7 = 0;
	Context.Map.System.ExecutionState = Constant7;
	int Constant8 = 0;
	Context.Map.System.ExecutionStateSource = Constant8;
	int Constant9 = 0;
	Context.Map.OmnidirectionalBurst.ExecutionStateSource = Constant9;
	NiagaraSpawnInfo Constant10 = (NiagaraSpawnInfo)0;
	Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst = Constant10;
	bool Constant11 = false;
	Context.Map.OmnidirectionalBurst.LocalSpace = Constant11;
	int Constant12 = 0;
	Context.Map.Smoke001.ExecutionState = Constant12;
	float Constant13 = 0;
	Context.Map.Smoke001.Age = Constant13;
	float Constant14 = 0;
	Context.Map.Smoke001.CurrentLoopDuration = Constant14;
	float Constant15 = 0;
	Context.Map.Smoke001.LoopedAge = Constant15;
	int Constant16 = 0;
	Context.Map.Smoke001.LoopCount = Constant16;
	float Constant17 = (0.0);
	Context.Map.Smoke001.NormalizedLoopAge = Constant17;
	float Constant18 = (0.0);
	Context.Map.Smoke001.Scalability.DistanceFraction = Constant18;
	int Constant19 = 0;
	Context.Map.Smoke001.ExecutionStateSource = Constant19;
	bool Constant20 = false;
	Context.Map.Smoke001.LocalSpace = Constant20;
	float Constant21 = 0;
	Context.Map.System.Age = Constant21;
	float Constant22 = 1;
	Context.Map.Smoke001.AlphaScale = Constant22;
	int Constant23 = 0;
	Context.Map.Smoke.ExecutionState = Constant23;
	float Constant24 = 0;
	Context.Map.Smoke.Age = Constant24;
	float Constant25 = 0;
	Context.Map.Smoke.CurrentLoopDuration = Constant25;
	float Constant26 = 0;
	Context.Map.Smoke.LoopedAge = Constant26;
	int Constant27 = 0;
	Context.Map.Smoke.LoopCount = Constant27;
	float Constant28 = (0.0);
	Context.Map.Smoke.NormalizedLoopAge = Constant28;
	float Constant29 = (0.0);
	Context.Map.Smoke.Scalability.DistanceFraction = Constant29;
	int Constant30 = 0;
	Context.Map.Smoke.ExecutionStateSource = Constant30;
	NiagaraSpawnInfo Constant31 = (NiagaraSpawnInfo)0;
	Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst = Constant31;
	bool Constant32 = false;
	Context.Map.Smoke.LocalSpace = Constant32;
	float Constant33 = 1;
	Context.Map.Smoke.AlphaScale = Constant33;
	float Constant34 = 0;
	Context.Map.System.CurrentLoopDuration = Constant34;
	float Constant35 = 0;
	Context.Map.System.LoopedAge = Constant35;
	int Constant36 = 0;
	Context.Map.System.LoopCount = Constant36;
	float Constant37 = (0.0);
	Context.Map.System.NormalizedLoopAge = Constant37;
	bool Constant38 = false;
	Context.Map.System.bCompleteOnInactive = Constant38;

	EnterStatScope(1 );
	OmnidirectionalBurst_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Smoke001_Func_(Context);
	ExitStatScope( );
	EnterStatScope(3 );
	Smoke_Func_(Context);
	ExitStatScope( );




	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(4 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = 0;
	Context.Map.OmnidirectionalBurst.Age = 0.0f;
	Context.Map.OmnidirectionalBurst.CurrentLoopDuration = 0.0f;
	Context.Map.OmnidirectionalBurst.ExecutionState = 0;
	Context.Map.OmnidirectionalBurst.ExecutionStateSource = 0;
	Context.Map.OmnidirectionalBurst.LocalSpace = false;
	Context.Map.OmnidirectionalBurst.LoopCount = 0;
	Context.Map.OmnidirectionalBurst.LoopedAge = 0.0f;
	Context.Map.OmnidirectionalBurst.NormalizedLoopAge = 0.0f;
	Context.Map.OmnidirectionalBurst.Scalability.DistanceFraction = 0.0f;
	Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Smoke.Age = 0.0f;
	Context.Map.Smoke.AlphaScale = 0.0f;
	Context.Map.Smoke.CurrentLoopDuration = 0.0f;
	Context.Map.Smoke.ExecutionState = 0;
	Context.Map.Smoke.ExecutionStateSource = 0;
	Context.Map.Smoke.LocalSpace = false;
	Context.Map.Smoke.LoopCount = 0;
	Context.Map.Smoke.LoopedAge = 0.0f;
	Context.Map.Smoke.NormalizedLoopAge = 0.0f;
	Context.Map.Smoke.Scalability.DistanceFraction = 0.0f;
	Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Smoke001.Age = 0.0f;
	Context.Map.Smoke001.AlphaScale = 0.0f;
	Context.Map.Smoke001.CurrentLoopDuration = 0.0f;
	Context.Map.Smoke001.ExecutionState = 0;
	Context.Map.Smoke001.ExecutionStateSource = 0;
	Context.Map.Smoke001.LocalSpace = false;
	Context.Map.Smoke001.LoopCount = 0;
	Context.Map.Smoke001.LoopedAge = 0.0f;
	Context.Map.Smoke001.NormalizedLoopAge = 0.0f;
	Context.Map.Smoke001.Scalability.DistanceFraction = 0.0f;
	Context.Map.System.Age = 0.0f;
	Context.Map.System.bCompleteOnInactive = false;
	Context.Map.System.CurrentLoopDuration = 0.0f;
	Context.Map.System.ExecutionState = 0;
	Context.Map.System.ExecutionStateSource = 0;
	Context.Map.System.LoopCount = 0;
	Context.Map.System.LoopedAge = 0.0f;
	Context.Map.System.NormalizedLoopAge = 0.0f;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.OmnidirectionalBurst.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.OmnidirectionalBurst.CurrentLoopDuration);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.OmnidirectionalBurst.ExecutionState);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.OmnidirectionalBurst.ExecutionStateSource);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.OmnidirectionalBurst.LocalSpace);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.OmnidirectionalBurst.LoopCount);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.OmnidirectionalBurst.LoopedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.OmnidirectionalBurst.NormalizedLoopAge);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.OmnidirectionalBurst.Scalability.DistanceFraction);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.OmnidirectionalBurst.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Smoke.Age);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Smoke.AlphaScale);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Smoke.CurrentLoopDuration);
	OutputDataInt(0, 17, TmpWriteIndex, Context.Map.Smoke.ExecutionState);
	OutputDataInt(0, 18, TmpWriteIndex, Context.Map.Smoke.ExecutionStateSource);
	OutputDataBool(0, 19, TmpWriteIndex, Context.Map.Smoke.LocalSpace);
	OutputDataInt(0, 20, TmpWriteIndex, Context.Map.Smoke.LoopCount);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Smoke.LoopedAge);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Smoke.NormalizedLoopAge);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Smoke.Scalability.DistanceFraction);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 27, TmpWriteIndex, Context.Map.Smoke.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Smoke001.Age);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Smoke001.AlphaScale);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Smoke001.CurrentLoopDuration);
	OutputDataInt(0, 31, TmpWriteIndex, Context.Map.Smoke001.ExecutionState);
	OutputDataInt(0, 32, TmpWriteIndex, Context.Map.Smoke001.ExecutionStateSource);
	OutputDataBool(0, 33, TmpWriteIndex, Context.Map.Smoke001.LocalSpace);
	OutputDataInt(0, 34, TmpWriteIndex, Context.Map.Smoke001.LoopCount);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Smoke001.LoopedAge);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Smoke001.NormalizedLoopAge);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.Smoke001.Scalability.DistanceFraction);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 39, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 41, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 42, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 43, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
